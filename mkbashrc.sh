#!/usr/bin/env bash

echo "# WARNING: This file was autogenerated on $(date). Do not edit."

# Set up the prompts
readonly     DEFAULT="\[\033[0;39m\]"
readonly       BLACK="\[\033[0;30m\]"
readonly         RED="\[\033[0;31m\]"
readonly       GREEN="\[\033[0;32m\]"
readonly      YELLOW="\[\033[0;33m\]"
readonly        BLUE="\[\033[0;34m\]"
readonly     MAGENTA="\[\033[0;35m\]"
readonly        CYAN="\[\033[0;36m\]"
readonly  LIGHT_GRAY="\[\033[0;37m\]"
readonly  COLOR_NONE="\[\033[0m\]"

cat <<EOF
case "\$TERM" in
	xterm*|rxvt*)
		TITLEBAR="\[\e]0;\u@\h: \w\a\]"
		;;
	*)
		TITLEBAR=
		;;
esac
parse_git_branch() {
	local git_status
	local state
	local untracked
	local remote
	local branch_pattern
	git_status="\$(git status 2>/dev/null)"
	if test \$? -ne 0; then
		return
	fi
	if [[ \${git_status} =~ 'nothing to commit'|'nothing added to commit' ]]; then
		state="$GREEN"
	else
		state="$RED"
	fi
	if [[ \${git_status} =~ Untracked\ files: ]]; then
		untracked='*'
	else
		untracked=''
	fi
	remote=
	if [[ \${git_status} =~ 'Your branch is '(ahead\ of|behind) ]]; then
		if [ "\${BASH_REMATCH[1]}" = "ahead of" ]; then
			remote=↑
		else
			remote=↓
		fi
	elif [[ \${git_status} =~ 'Your branch and '.*' have diverged' ]]; then
		remote=↕
	fi
	# Branch pattern
	branch_pattern="^On branch ([^${IFS}]*)"
	[[ \${git_status} =~ \${branch_pattern} ]]
	echo " (\${state}\${BASH_REMATCH[1]}\${untracked}${YELLOW}\${remote}${COLOR_NONE})"
}
prompt_func() {
	local previous_return_value=\$?
	local prompt
	prompt="\${TITLEBAR}[${RED}\h${COLOR_NONE}:\w]\$(parse_git_branch) \u"
	if test \$previous_return_value -eq 0; then
		PS1="\${prompt}\\\$ "
	else
		PS1="\${prompt}${RED}\\\$${COLOR_NONE} "
	fi
}
PROMPT_COMMAND=prompt_func
EOF

# Evaluation helper.
cat <<"EOF"
eval_helper() {
	bc -ql <<< "$@"|perl -pe 's/(\.[^0]+)0+$|\.0+$/$1/'
}
EOF

# Add alises
cat <<"EOF"
if which dircolors &>/dev/null; then
	eval "$(dircolors)"
	alias ls='ls --color=auto'
else
	alias ls='ls -G'
fi
alias less='less -R'
alias bc='bc -ql'
alias '?=eval_helper'
alias gdb='gdb -q'
EOF
echo "alias dotfiles='GIT_DIR=$HOME/.dotfiles/dotfiles.git GIT_WORK_TREE=$HOME git'"

# Check for nvim
if which nvim >/dev/null; then
	echo "alias view='nvim -R'"
fi

# Load local changes, if appropriate.
cat <<EOF
if [ -f "$HOME/.bash_functions" ]; then . "$HOME/.bash_functions"; fi
if [ -f "$HOME/.bash_aliases" ]; then . "$HOME/.bash_aliases"; fi
EOF
